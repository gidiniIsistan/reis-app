---
import UserCard from '@/components/UserCard.astro';
import {HttpError} from '@/errors/HttpError';
import {getGroup, addUserToGroup} from '@/services/groupService';
import {checkSession} from '@/services/authService';
import {getUserGroupsByEmail, emptyUser} from '@/services/userService';
import {errorHandler} from '@/errors/errorHandler';

export const partial = true;
const data = {
    user: emptyUser,
    del: false,
    group_id: '',
    lider: false,
};

try {
    if (Astro.request.method !== 'POST') {
        throw new HttpError(405, 'Method Not Allowed', `Method ${Astro.request.method} is not allowed`, { value: 'GET' });
    }

    const { group_id } = Astro.params;
    const body = await Astro.request.formData();
    const email = body.get('email') as string;
    const del = body.get('del') === 'true';

    if (!group_id || !email || del === null) {
        throw new HttpError(400, 'Bad Request', 'Missing required fields');
    }

    const group = await getGroup(group_id);
    if (!group) {
        throw new HttpError(404, 'Not Found', 'Group not found');
    }

    const session = await checkSession(Astro.request);
    if (group.lider_id !== session.user.id) {
        throw new HttpError(403, 'Forbidden', 'You are not the leader of this group');
    }

    const ug = await getUserGroupsByEmail(email);
    if (!ug || !ug.user) {
        throw new HttpError(404, 'Not Found', 'User not found');
    }
    if (ug.groups.some(g => g.recorrido_id === group.recorrido_id)) {
        throw new HttpError(403, 'Forbidden', 'User is already in a group with this recorrido');
    }
    if (ug.user.role === 'teacher') {
        throw new HttpError(403, 'Forbidden', 'User is a teacher, cannot be added to a group');
    }

    const result = await addUserToGroup(group_id, ug.user.id);
    if (!result) {
        throw new HttpError(500, 'Internal Server Error', 'Failed to add user to group');
    }

    data.user = ug.user;
    data.group_id = group_id;
    data.del = del;
    data.lider = group.lider_id === ug.user.id;
} catch (error) {
    return errorHandler(error);
}

//last seen in the past 5 minutes
---
<UserCard {...data.user} groupId={data.group_id} del={data.del} lider={data.lider}
    online={new Date().getTime() > new Date(data.user.last_seen).getTime() + 300000}
/>
