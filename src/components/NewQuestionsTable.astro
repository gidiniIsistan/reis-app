---
import NewQuestionRow from './NewQuestionRow.astro';
export interface Props {
    questions: { id: string, question: string }[];
    editable: boolean;
}
const { editable, questions } = Astro.props;
---
<div class="flex-1 overflow-auto border dark:border-lilac-800 rounded-lg transition-colors">
    <table class="w-full text-left">
        <thead class="text-xs uppercase bg-lilac-500 dark:bg-lilac-800 text-white transition-colors">
            <tr>
                <th scope="col" class="py-3 pl-3 flex-1">Pregunta</th>
                {editable &&
                <th scope="col" class="py-3 w-fit text-center pr-3">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 inline-block"><path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                    </svg>
                </th>
                }
            </tr>
        </thead>
        <tbody id="new-questions-list">
            {questions.map((question) => (
                <NewQuestionRow id={question.id} question={question.question} edit={editable} />
            ))}
            <!-- Aquí se agregarán dinámicamente las filas -->
            <tr class="emptyMessage"><td>No hay preguntas</td></tr>
        </tbody>
    </table>
</div>
<script>
    document.addEventListener('astro:page-load', () => {
        const newQuestionInput = document.getElementById('new-question-input') as HTMLInputElement;
        const cardList = document.getElementById('new-questions-list');
        const emptyMessage = cardList?.querySelector('.emptyMessage');

        if(!newQuestionInput || !cardList || !emptyMessage) {
            return;
        }

        const showEmptyMessage = () => {
            console.log('showEmptyMessage', cardList.children.length);
            if (cardList.children.length > 1) {
                emptyMessage.classList.add('hidden');
            } else {
                emptyMessage.classList.remove('hidden');
            }
        }

        document.addEventListener('htmx:afterSwap', function(event) {
            const customEvent = event as CustomEvent;

            if (customEvent.detail.target.id === 'new-questions-list' 
                || customEvent.detail.target.id.startsWith('nq-row-')) {
                // Limpia el valor del input
                newQuestionInput.value = '';

                showEmptyMessage();
            }
        });

        showEmptyMessage();
    });
</script>
